swagger: '2.0'
info:
  description: |
    This is a sample Petstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: 1.0.0
  title: Swagger Projecttraining
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: localhost:3000
# basePath: /api/v1
tags:
  - name: auth
    description: Everything about your auth
  - name: user
    description: Operations about user
  - name: infos
    description: info of user
  - name: projects
    description: info of user
  - name: skill management
    description: info of user
# schemes:
# - http
paths:
  /auth/sign_in:
    post:
      tags:
        - auth
      summary: login
      description: not required login
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Account'
      responses:
        401:
          description: not auth
  /auth/password:
    post:
      tags:
        - auth
      summary: send email reset password
      description: not required login
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/email_redirect'
      responses:
        200:
          description: ok
    put:
      tags:
        - auth
      summary: change password
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/changePass'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
  /auth/sign_out:
    delete:
      tags:
        - auth
      summary: logout required login
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
  /auth/confirmation:
    post:
      tags:
        - auth
      summary: resend email confirm
      description: not required login
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/email'
      responses:
        200:
          description: ok
  /users:
    get:
      tags:
        - user
      summary: get all user
      produces:
        - application/json
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
    post:
      tags:
        - user
      summary: create user
      description: only admin
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/user'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
  /users/{userId}:
    get:
      tags:
        - user
      summary: get User by ID
      description: Returns a single pet
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
    delete:
      summary: delete user by id
      tags:
        - user
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
    put:
      summary: update user by id
      tags:
        - user
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/user'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
  /infos:
    post:
      tags:
        - infos
      summary: create user info
      description: only create one/user
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/info'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
    put:
      summary: update user info
      tags:
        - infos
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/info'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok

  /skills:
    get:
      tags:
        - skills
      summary: get all skills
      produces:
        - application/json
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
    post:
      tags:
        - skills
      summary: create skill
      description: only admin
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/skill'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
  /skills/{id}:
    get:
      tags:
        - skills
      summary: get skill by ID
      description: Returns a single pet
      operationId: getSkillById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
    delete:
      summary: delete skill by id
      tags:
        - skills
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
    put:
      summary: update skill by id
      tags:
        - skills
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/skill'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK

  /projects:
    get:
      tags:
        - projects
      summary: get all projects
      produces:
        - application/json
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
    post:
      tags:
        - projects
      summary: create projects
      description: only admin
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/skill'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
  /projects/{id}:
    get:
      tags:
        - projects
      summary: get projects by ID
      description: Returns a single pet
      operationId: getprojectsById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
    delete:
      summary: delete projects by id
      tags:
        - projects
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
    put:
      summary: update projects by id
      tags:
        - projects
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/project'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK

  /roles:
    post:
      tags:
        - roles
      summary: create user role
      description: only admin
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/skill'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
  /roles/{id}:
    delete:
      summary: delete user role by id
      tags:
        - roles
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
  /users/{id}/skills:
    get:
      summary: get all skill of user
      tags:
        - skill management
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
  /skill/{id}/users:
    get:
      summary: get all user have this skill
      tags:
        - skill management
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
  /skillManage:
    post:
      tags:
        - skill management
      summary: create user role
      description: only admin
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/skill'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
  /skillManage/{id}:
    delete:
      summary: delete projects by id
      tags:
        - skill management
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
  /users/{id}/projects:
    get:
      summary: get all skill of user
      tags:
        - project management
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
  /projectManage:
    post:
      tags:
        - project management
      summary: create user role
      description: only admin
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/skill'
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: ok
  /projectManage/{id}:
    get:
      tags:
        - project management
      summary: get all user have skill
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
    delete:
      summary: delete projects by id
      tags:
        - project management
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      security:
        - client: []
          uid: []
          access-token: []
      responses:
        200:
          description: OK
securityDefinitions:
  client:
    type: apiKey
    name: client
    in: header
  uid:
    type: apiKey
    name: uid
    in: header
  access-token:
    type: apiKey
    name: access-token
    in: header

definitions:
  Account:
    type: object
    properties:
      email:
        type: string
        example: "admin@admin.com"
      password:
        type: string
        example: "password"
    xml:
      name: Account
  user:
    type: object
    properties:
      email:
        type: string
        example: "test@test.com"
      password:
        type: string
        example: "password"
      code:
        type: string
        example: "B123456"
      join_date:
        type: integer
        example: 1611073594
        description: not required/ unix timestamp
      contract_type:
        type: string
        example: "partime"
        description: not required
      position:
        type: string
        example: "ceo"
        description: not required

    xml:
      name: Account
  email:
    type: object
    properties:
      email:
        type: string
        example: "admin@admin.com"
    xml:
      name: email
  email_redirect:
    type: object
    properties:
      email:
        type: string
        example: "admin@admin.com"
      redirect_url:
        type: string
    xml:
      name: email
  changePass:
    type: object
    properties:
      password:
        type: string
        example: "12345678"
      password_confirmation:
        type: string
        example: "12345678"
      current_password:
        type: string
        example: "password"
        description: not required if not sign in
    xml:
      name: changepass
  info:
    type: object
    properties:
      dateOfBirth:
        type: integer
        example: "12345678"
        description: unix time
      name:
        type: string
        example: "thang"
  skill:
    type: object
    properties:
      dateOfBirth:
        type: integer
        example: "12345678"
        description: unix time
      name:
        type: string
        example: "thang"
  project:
    type: object
    properties:
      name:
        type: string
        example: "project"
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
# schemes:
#  - http
# Added by API Auto Mocking Plugin
# host: localhost:3000
# basePath: /api/v1
# schemes:
#   - http
# Added by API Auto Mocking Plugin
host: localhost:3000
basePath: /api/v1
schemes:
 - http
# Added by API Auto Mocking Plugin
